// <auto-generated />
using System;
using CallTaxi.Services.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CallTaxi.Services.Migrations
{
    [DbContext(typeof(CallTaxiDbContext))]
    [Migration("20250501032334_SeedInitialData")]
    partial class SeedInitialData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CallTaxi.Services.Database.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mercedes-Benz"
                        },
                        new
                        {
                            Id = 2,
                            Name = "BMW"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Audi"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Volkswagen"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Toyota"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Honda"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Ford"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Hyundai"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Kia"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Skoda"
                        });
                });

            modelBuilder.Entity("CallTaxi.Services.Database.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("CallTaxi.Services.Database.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sarajevo"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Banja Luka"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Tuzla"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Zenica"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Mostar"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Bihać"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Brčko"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Bijeljina"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Prijedor"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Trebinje"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Doboj"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Cazin"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Velika Kladuša"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Visoko"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Zavidovići"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Gračanica"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Konjic"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Livno"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Srebrenik"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Gradačac"
                        });
                });

            modelBuilder.Entity("CallTaxi.Services.Database.DriveRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DriverId")
                        .HasColumnType("int");

                    b.Property<string>("EndLocation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StartLocation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleTierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("VehicleTierId");

                    b.ToTable("DriveRequests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AcceptedAt = new DateTime(2023, 12, 27, 1, 0, 0, 0, DateTimeKind.Utc),
                            BasePrice = 20.00m,
                            CompletedAt = new DateTime(2023, 12, 27, 2, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            DriverId = 2,
                            EndLocation = "43.8247222,18.3313889",
                            FinalPrice = 25.00m,
                            StartLocation = "43.8562586,18.4130763",
                            StatusId = 3,
                            UserId = 4,
                            VehicleId = 1,
                            VehicleTierId = 2
                        },
                        new
                        {
                            Id = 2,
                            AcceptedAt = new DateTime(2023, 12, 29, 1, 0, 0, 0, DateTimeKind.Utc),
                            BasePrice = 10.00m,
                            CompletedAt = new DateTime(2023, 12, 29, 2, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2023, 12, 29, 0, 0, 0, 0, DateTimeKind.Utc),
                            DriverId = 3,
                            EndLocation = "44.2036111,17.9077778",
                            FinalPrice = 12.00m,
                            StartLocation = "44.2019444,17.9080556",
                            StatusId = 3,
                            UserId = 4,
                            VehicleId = 2,
                            VehicleTierId = 1
                        },
                        new
                        {
                            Id = 3,
                            AcceptedAt = new DateTime(2023, 12, 30, 1, 0, 0, 0, DateTimeKind.Utc),
                            BasePrice = 15.00m,
                            CompletedAt = new DateTime(2023, 12, 30, 2, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2023, 12, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            DriverId = 2,
                            EndLocation = "43.3458333,17.8083333",
                            FinalPrice = 18.00m,
                            StartLocation = "43.3372222,17.8150000",
                            StatusId = 3,
                            UserId = 5,
                            VehicleId = 1,
                            VehicleTierId = 2
                        });
                });

            modelBuilder.Entity("CallTaxi.Services.Database.DriveRequestStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("DriveRequestStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Request is waiting to be accepted by a driver",
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Request has been accepted by a driver",
                            Name = "Accepted"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Drive has been completed",
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Request has been cancelled",
                            Name = "Cancelled"
                        });
                });

            modelBuilder.Entity("CallTaxi.Services.Database.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Male"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Female"
                        });
                });

            modelBuilder.Entity("CallTaxi.Services.Database.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DriveRequestId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("DriveRequestId", "UserId")
                        .IsUnique();

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Excellent service! The driver was very professional and the car was comfortable.",
                            CreatedAt = new DateTime(2023, 12, 27, 3, 0, 0, 0, DateTimeKind.Utc),
                            DriveRequestId = 1,
                            Rating = 5,
                            UserId = 4
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Good ride, everything was on time.",
                            CreatedAt = new DateTime(2023, 12, 29, 3, 0, 0, 0, DateTimeKind.Utc),
                            DriveRequestId = 2,
                            Rating = 4,
                            UserId = 4
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Perfect experience! Will definitely use this service again.",
                            CreatedAt = new DateTime(2023, 12, 30, 3, 0, 0, 0, DateTimeKind.Utc),
                            DriveRequestId = 3,
                            Rating = 5,
                            UserId = 5
                        });
                });

            modelBuilder.Entity("CallTaxi.Services.Database.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "System administrator with full access",
                            IsActive = true,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Taxi driver role",
                            IsActive = true,
                            Name = "Driver"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Regular user role",
                            IsActive = true,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("CallTaxi.Services.Database.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("GenderId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 5,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "calltaxi.receiver@gmail.com",
                            FirstName = "Denis",
                            GenderId = 1,
                            IsActive = true,
                            LastName = "Mušić",
                            PasswordHash = "3KbrBi5n9zdQnceWWOK5zaeAwfEjsluyhRQUbNkcgLQ=",
                            PasswordSalt = "6raKZCuEsvnBBxPKHGpRtA==",
                            PhoneNumber = "+387 62 667 961",
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 5,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "example1@gmail.com",
                            FirstName = "Amel",
                            GenderId = 1,
                            IsActive = true,
                            LastName = "Musić",
                            PasswordHash = "kDPVcZaikiII7vXJbMEw6B0xZ245I29ocaxBjLaoAC0=",
                            PasswordSalt = "O5R9WmM6IPCCMci/BCG/eg==",
                            PhoneNumber = "+387 62 667 961",
                            Username = "driver"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 5,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "example2@gmail.com",
                            FirstName = "Adil",
                            GenderId = 1,
                            IsActive = true,
                            LastName = "Joldić",
                            PasswordHash = "BiWDuil9svAKOYzii5wopQW3YqjVfQrzGE2iwH/ylY4=",
                            PasswordSalt = "pfNS+OLBaQeGqBIzXXcWuA==",
                            PhoneNumber = "+387 62 667 961",
                            Username = "driver2"
                        },
                        new
                        {
                            Id = 4,
                            CityId = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "calltaxi.sender@gmail.com",
                            FirstName = "Ajla",
                            GenderId = 2,
                            IsActive = true,
                            LastName = "Frašto",
                            PasswordHash = "KUF0Jsocq9AqdwR9JnT2OrAqm5gDj7ecQvNwh6fW/Bs=",
                            PasswordSalt = "c3ZKo0va3tYfnYuNKkHDbQ==",
                            PhoneNumber = "+387 62 667 961",
                            Username = "user"
                        },
                        new
                        {
                            Id = 5,
                            CityId = 5,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "example3@gmail.com",
                            FirstName = "Elmir",
                            GenderId = 1,
                            IsActive = true,
                            LastName = "Babović",
                            PasswordHash = "juUTOe91pl0wpxh00N7eCzScw63/1gzn5vrGMsRCAhY=",
                            PasswordSalt = "4ayImwSF0Q1QlxPABDp9Mw==",
                            PhoneNumber = "+387 62 667 961",
                            Username = "user2"
                        });
                });

            modelBuilder.Entity("CallTaxi.Services.Database.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateAssigned")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateAssigned = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateAssigned = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RoleId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            DateAssigned = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RoleId = 2,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            DateAssigned = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RoleId = 3,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            DateAssigned = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RoleId = 3,
                            UserId = 5
                        });
                });

            modelBuilder.Entity("CallTaxi.Services.Database.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("PetFriendly")
                        .HasColumnType("bit");

                    b.Property<int>("SeatsCount")
                        .HasColumnType("int");

                    b.Property<string>("StateMachine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleTierId")
                        .HasColumnType("int");

                    b.Property<int>("YearOfManufacture")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("LicensePlate")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleTierId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            Color = "Black",
                            LicensePlate = "A123-ABC",
                            Name = "Mercedes-Benz E-Class",
                            PetFriendly = true,
                            SeatsCount = 3,
                            StateMachine = "Accepted",
                            UserId = 2,
                            VehicleTierId = 2,
                            YearOfManufacture = 2022
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 4,
                            Color = "White",
                            LicensePlate = "B456-DEF",
                            Name = "Volkswagen Passat",
                            PetFriendly = false,
                            SeatsCount = 4,
                            StateMachine = "Accepted",
                            UserId = 3,
                            VehicleTierId = 1,
                            YearOfManufacture = 2021
                        });
                });

            modelBuilder.Entity("CallTaxi.Services.Database.VehicleTier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("VehicleTiers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Basic vehicle tier for everyday rides.",
                            Name = "Standard"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Comfortable rides with experienced drivers and newer vehicles.",
                            Name = "Premium"
                        },
                        new
                        {
                            Id = 3,
                            Description = "High-end vehicles offering top-tier comfort and amenities.",
                            Name = "Luxury"
                        });
                });

            modelBuilder.Entity("CallTaxi.Services.Database.Chat", b =>
                {
                    b.HasOne("CallTaxi.Services.Database.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CallTaxi.Services.Database.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("CallTaxi.Services.Database.DriveRequest", b =>
                {
                    b.HasOne("CallTaxi.Services.Database.User", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CallTaxi.Services.Database.DriveRequestStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CallTaxi.Services.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CallTaxi.Services.Database.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CallTaxi.Services.Database.VehicleTier", "VehicleTier")
                        .WithMany()
                        .HasForeignKey("VehicleTierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Status");

                    b.Navigation("User");

                    b.Navigation("Vehicle");

                    b.Navigation("VehicleTier");
                });

            modelBuilder.Entity("CallTaxi.Services.Database.Review", b =>
                {
                    b.HasOne("CallTaxi.Services.Database.DriveRequest", "DriveRequest")
                        .WithMany()
                        .HasForeignKey("DriveRequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CallTaxi.Services.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DriveRequest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CallTaxi.Services.Database.User", b =>
                {
                    b.HasOne("CallTaxi.Services.Database.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CallTaxi.Services.Database.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("CallTaxi.Services.Database.UserRole", b =>
                {
                    b.HasOne("CallTaxi.Services.Database.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CallTaxi.Services.Database.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CallTaxi.Services.Database.Vehicle", b =>
                {
                    b.HasOne("CallTaxi.Services.Database.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CallTaxi.Services.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CallTaxi.Services.Database.VehicleTier", "VehicleTier")
                        .WithMany()
                        .HasForeignKey("VehicleTierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("User");

                    b.Navigation("VehicleTier");
                });

            modelBuilder.Entity("CallTaxi.Services.Database.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CallTaxi.Services.Database.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
